plugins {
    id 'java'
}

description = "Assignment 5 build.gradle"

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.json', name: 'json', version: '20200518'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
}

/*
 * task for running Client
 *
 * gradle runClient -PleaderHost=localhost -PleaderPort=8000
 */
task runClient(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = "run Client"
    main = 'Client'
    standardInput = System.in

    // Read arguments from project properties with defaults
    args = [
            project.findProperty('host') ?: 'localhost',
            project.findProperty('clientPort') ?: '8000'
    ]
}

/*
 * task for running Leader
 *
 * gradle runLeader -PleaderPort=8000
 */
task runLeader(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = "run Leader"
    main = 'Leader'

    // Leader only needs port argument
    args = [
            project.findProperty('leaderPort') ?: '8000'
    ]
}

/*
 * task for running Node(s)
 *
 * gradle runNode -PleaderPort=8000 (normal node)
 * gradle runNode -PleaderPort=8000 -Pfault=0 (normal node)
 * gradle runNode -PleaderPort=8000 -Pfault=1 (faulty node)
 */
task runNode(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = "run Nodes"
    main = 'Nodes'

    // args : leaderHost, leaderPort, faultFlag
    args = [
            project.findProperty('leaderHost') ?: 'localhost',
            project.findProperty('leaderPort') ?: '8000',
            project.findProperty('fault') ?: '0'
    ]
}
